/*
 *  SPDX-License-Identifier: LGPL-3.0-only
 *  Copyright (c) 2020 Drakmyth. All rights reserved.
 */

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle'

sourceCompatibility = targetCompatibility = project.javaversion

group = project.mainpackage.substring(0, project.mainpackage.lastIndexOf('/')).replace('/', '.')
archivesBaseName = project.modid
version = "${project.minecraftversion}-${project.modversion}"

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraftversion}-${project.forgeversion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

minecraft {
    mappings channel: 'snapshot', version: project.mappingsversion

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                manufactory {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                manufactory {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--existing', file('src/main/resources/'), '--output', file('src/generated/resources/')

            mods {
                manufactory {
                    source sourceSets.main // TODO: Use a dedicated datagen sourceset to exclude non-texture resources
                }
            }
        }
    }
}

ext {
    replacements = [
        FORGE_VERSION: project.forgeversion,
        FML_VERSION: project.fmlversion,
        JAVA_VERSION: project.javaversion,
        MC_VERSION: project.minecraftversion,
        MAPPINGS_VERSION: project.mappingsversion,
        MOD_VERSION: project.modversion,
        MOD_ID: project.modid,
        MOD_NAME: project.modname,
        MAIN_PACKAGE: project.mainpackage,
        AUTHOR: project.author,
        CREDITS: project.credits,
        HOMEPAGE: project.homepage,
        LOGO_FILE: project.logofile,
        ISSUE_TRACKER: project.issuetracker,
        UPDATEJSON: project.updatejson
    ]

    sourceTokenFiles = ["${project.mainpackage}/Reference.java"]
    resourceTokenFiles = ['pack.mcmeta', 'META-INF/mods.toml']
}

import org.apache.tools.ant.filters.ReplaceTokens

task replaceSourceTokens(type: Sync) {
    inputs.property('replacements', project.replacements)

    from (sourceSets.main.java) {
        include project.sourceTokenFiles
        filter(ReplaceTokens, tokens: project.replacements)
    }
    into "$buildDir/src"

    from (sourceSets.main.java) {
        exclude project.sourceTokenFiles
    }
    into "$buildDir/src"
}

compileJava {
    source = replaceSourceTokens.outputs
}

processResources {
    inputs.property('replacements', project.replacements)

    from (sourceSets.main.resources.srcDirs) {
        include project.resourceTokenFiles
        expand(project.replacements)
    }

    from (sourceSets.main.resources.srcDirs) {
        exclude project.resourceTokenFiles
    }
}

jar {
    manifest {
        attributes([
            'Specification-Title': project.modname,
            'Specification-Vendor': project.author,
            'Specification-Version': project.modversion.substring(0, project.modversion.lastIndexOf('.')),
            'Implementation-Title': project.name,
            'Implementation-Version': project.modversion,
            'Implementation-Vendor': project.author,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task refreshGeneratedAssets {
    doFirst {
        delete 'src/main/resources/data'
        delete 'src/main/resources/assets'
    }

    doLast {
        copy {
            from 'src/generated/resources'
            into 'src/main/resources'
            exclude '**/.cache'
        }
        copy {
            from 'psd/spritesheet-assets'
            into 'src/main/resources/assets/manufactory/textures'
        }
        copy {
            from 'psd/guis-assets'
            into 'src/main/resources/assets/manufactory/textures'
        }
    }
}
