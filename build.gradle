/*
 *  SPDX-License-Identifier: LGPL-3.0-only
 *  Copyright (c) 2020 Drakmyth. All rights reserved.
 */

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle'
// apply plugin: 'jacoco'

java.toolchain.languageVersion = JavaLanguageVersion.of(project.javaversion)

group = project.mainpackage.substring(0, project.mainpackage.lastIndexOf('/')).replace('/', '.')
archivesBaseName = project.modid
version = "${project.minecraftversion}-${project.modversion}"

// repositories {
//     maven { url = 'https://jitpack.io' }
// }

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraftversion}-${project.forgeversion}"
    // testImplementation fg.deobf("com.github.alcatrazEscapee:mcjunitlib:${project.mcjunitlibversion}-${project.minecraftversion}") {
    //     transitive = false
    // }
}

minecraft {
    mappings channel: 'official', version: project.mappingsversion

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,NETWORK,CONFIG'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Enable colors in terminal log
            property 'log4j.skipJansi', 'false'

            // Use custom log4j2 configuration
            property 'log4j.configurationFile', '../src/main/resources/log4j2.xml'

            // Stop forge from killing the Gradle daemon on exit
            forceExit false

            mods {
                manufactory {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'CORE,FORGEMOD,LOADING,SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Enable colors in terminal log
            property 'log4j.skipJansi', 'false'

            // Stop forge from killing the Gradle daemon on exit
            forceExit false

            mods {
                manufactory {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'CORE,FORGEMOD,LOADING,SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            // Enable colors in terminal log
            property 'log4j.skipJansi', 'false'

            // Stop forge from killing the Gradle daemon on exit
            forceExit false

            args '--mod', project.modid, '--all', '--existing', file('src/main/resources/'), '--output', file('src/generated/resources/')

            mods {
                manufactory {
                    source sourceSets.main // TODO: Use a dedicated datagen sourceset to exclude non-texture resources
                }
            }
        }

        // serverTest {
        //     parent server
        //     workingDirectory project.file('run')
        //     main 'com.alcatrazescapee.mcjunitlib.DedicatedTestServerLauncher'
        //     property 'forge.logging.console.level', 'unittest'
        //     environment 'MOD_CLASSES', String.join(File.pathSeparator,
        //         "${project.modid}%%${sourceSets.main.output.resourcesDir}",
        //         "${project.modid}%%${sourceSets.main.output.classesDir}",
        //         "${project.modid}%%${sourceSets.test.output.resourcesDir}",
        //         "${project.modid}%%${sourceSets.test.output.classesDir}",
        //     )
        //     environment 'target', 'fmltestserver'
        //     forceExit false
        //     mods {
        //         manufactory {
        //             sources sourceSets.test
        //         }
        //     }
        // }
    }
}

// tasks.whenTaskAdded { task ->
//     if (task.name.equals('runServerTest')) {

//         jacoco {
//             applyTo task
//             toolVersion = '0.8.6'
//             reportsDir = file("$buildDir/reports/jacoco")
//         }

//         task.jacoco {
//             enabled = true
//             destinationFile = file("$buildDir/jacoco/runServerTest.exec")
//             includes = []
//             excludes = []
//             excludeClassLoaders = []
//             includeNoLocationClasses = true
//         }
//     }
// }

// task generateCoverageReport(type:JacocoReport) {
//     enabled = true

//     sourceSets sourceSets.main
//     executionData = files("$buildDir/jacoco/runServerTest.exec")

//     reports {
//         xml {
//             enabled = true
//             destination = file("$buildDir/reports/coverage.xml")
//         }
//         csv.enabled = false
//         html.enabled = false
//     }
// }

// task runServerTestWithCoverage(type:JacocoReport, dependsOn: 'runServerTest') {
//     enabled = true
//     group = 'fg_runs'

//     sourceSets sourceSets.main
//     executionData = files("$buildDir/jacoco/runServerTest.exec")

//     reports {
//         xml.enabled = false
//         csv.enabled = false
//         html {
//             enabled = true
//             destination = file("$buildDir/reports/html")
//         }
//     }
// }

ext {
    replacements = [
        FORGE_VERSION: project.forgeversion,
        FML_VERSION: project.fmlversion,
        JAVA_VERSION: project.javaversion,
        MC_VERSION: project.minecraftversion,
        MAPPINGS_VERSION: project.mappingsversion,
        MOD_VERSION: project.modversion,
        MOD_ID: project.modid,
        MOD_NAME: project.modname,
        MAIN_PACKAGE: project.mainpackage,
        AUTHOR: project.author,
        CREDITS: project.credits,
        HOMEPAGE: project.homepage,
        LOGO_FILE: project.logofile,
        ISSUE_TRACKER: project.issuetracker,
        UPDATEJSON: project.updatejson
    ]

    sourceTokenFiles = ["${project.mainpackage}/Reference.java".toString()]
    resourceTokenFiles = ['pack.mcmeta', 'META-INF/mods.toml']
}

task replaceSourceTokens(type: Sync) {
    inputs.property('replacements', project.replacements)

    from (sourceSets.main.java) {
        filesMatching(project.sourceTokenFiles) {
            expand(project.replacements)
        }
    }
    into "$buildDir/src"
}

compileJava {
    dependsOn replaceSourceTokens
    source = replaceSourceTokens.outputs
}

processResources {
    inputs.property('replacements', project.replacements)

    filesMatching(project.resourceTokenFiles) {
        expand(project.replacements)
    }
}

jar {
    manifest {
        attributes([
            'Specification-Title': project.modname,
            'Specification-Vendor': project.author,
            'Specification-Version': project.modversion.substring(0, project.modversion.lastIndexOf('.')),
            'Implementation-Title': project.name,
            'Implementation-Version': project.modversion,
            'Implementation-Vendor': project.author,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task refreshGeneratedAssets {
    doFirst {
        delete 'src/main/resources/data'
        delete 'src/main/resources/assets'
    }

    doLast {
        copy {
            from 'src/generated/resources'
            into 'src/main/resources'
            exclude '**/.cache'
        }
        // TODO: genericize this so we don't need a separate copy block for each psd
        copy {
            from 'psd/spritesheet-assets'
            into 'src/main/resources/assets/manufactory/textures'
        }
        copy {
            from 'psd/guis-assets'
            into 'src/main/resources/assets/manufactory/textures'
        }
        copy {
            from 'psd/fluids-assets'
            into 'src/main/resources/assets/manufactory/textures'
        }
    }
}
